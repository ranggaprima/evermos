{"ast":null,"code":"var _jsxFileName = \"/home/rangga/Downloads/aia/frontend/src/components/store/reducers.js\";\nimport React from 'react';\nimport { combineReducers } from 'redux';\nimport fetchJsonp from 'fetch-jsonp';\nimport Card from '../Card';\nimport axios from 'axios';\nconst GET_IMAGE_LOADING = 'GET_IMAGE_LOADING';\nconst GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS';\nconst GET_IMAGE_ERROR = 'GET_IMAGE_ERROR';\nexport function getImageLoading(bool) {\n  return {\n    type: GET_IMAGE_LOADING,\n    loading: bool\n  };\n}\nexport function getImageSuccess(cards) {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    cards\n  };\n}\nexport function getImageError(bool) {\n  return {\n    type: GET_IMAGE_ERROR,\n    error: bool\n  };\n}\nexport function getImage(url) {\n  const api_path = `http://localhost:5000/api/getImage`;\n\n  let jsonFlickrFeed = json => {\n    Object.keys(json.items).forEach(function (key) {\n      let obj = json.items[key];\n      console.log(obj);\n    });\n  };\n\n  return dispatch => {\n    dispatch(getImageLoading(true));\n    axios.post(api_path).then(res => {\n      return res.data;\n    }).then(data => {\n      console.log(\"HERE 1: \", jsonFlickrFeed(data));\n      console.log('HERE 2: ', data);\n      let cards = [];\n      cards = data.map((card, index) => /*#__PURE__*/React.createElement(Card, {\n        key: index,\n        author: card.author,\n        title: card.title,\n        description: card.description,\n        image: card.media.m,\n        tags: card.tags,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }\n      }));\n      dispatch(getImageSuccess(cards));\n    }).catch(() => dispatch(getImageError(true))); // let fetch = api => fetchJsonp(url, {\n    //   jsonpCallback: ' ',\n    //   jsonpCallbackFunction: 'jsonFlickrFeed'\n    // })\n    // fetch(url)\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw Error(response.statusText);\n    //     }\n    //     dispatch(getImageLoading(false));\n    //     return response;\n    //   })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     let cards = [];\n    //     cards = data.items.map((card, index) => (\n    //       <Card\n    //         key={index}\n    //         author={card.author}\n    //         title={card.title}\n    //         description={card.description}\n    //         image={card.media.m}\n    //         tags={card.tags}\n    //       />\n    //     ))\n    //     dispatch(getImageSuccess(cards))\n    //   })\n    //   .catch(() => dispatch(getImageError(true)));\n  };\n}\nexport function error(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_ERROR:\n      return action.error;\n\n    default:\n      return state;\n  }\n}\nexport function loading(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_LOADING:\n      return action.loading;\n\n    default:\n      return state;\n  }\n}\nexport function cards(state = [], action) {\n  switch (action.type) {\n    case GET_IMAGE_SUCCESS:\n      return action.cards;\n\n    default:\n      return state;\n  }\n}\nexport default combineReducers({\n  error,\n  loading,\n  cards\n});","map":{"version":3,"sources":["/home/rangga/Downloads/aia/frontend/src/components/store/reducers.js"],"names":["React","combineReducers","fetchJsonp","Card","axios","GET_IMAGE_LOADING","GET_IMAGE_SUCCESS","GET_IMAGE_ERROR","getImageLoading","bool","type","loading","getImageSuccess","cards","getImageError","error","getImage","url","api_path","jsonFlickrFeed","json","Object","keys","items","forEach","key","obj","console","log","dispatch","post","then","res","data","map","card","index","author","title","description","media","m","tags","catch","state","action"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { combineReducers } from 'redux';\nimport fetchJsonp from 'fetch-jsonp';\nimport Card from '../Card';\nimport axios from 'axios'\n\n\nconst GET_IMAGE_LOADING = 'GET_IMAGE_LOADING';\nconst GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS';\nconst GET_IMAGE_ERROR = 'GET_IMAGE_ERROR';\n\nexport function getImageLoading(bool) {\n  return {\n    type: GET_IMAGE_LOADING,\n    loading: bool\n  };\n}\n\nexport function getImageSuccess(cards) {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    cards\n  };\n}\n\nexport function getImageError(bool) {\n  return {\n    type: GET_IMAGE_ERROR,\n    error: bool\n  };\n}\n\nexport function getImage(url) {\n  const api_path = `http://localhost:5000/api/getImage`\n\n  let jsonFlickrFeed = (json) => {\nObject.keys(json.items).forEach(function (key) {\n          let obj = json.items[key];\n          console.log(obj)\n\n\n        })\n\n  };\n\n  return (dispatch) => {\n    dispatch(getImageLoading(true));\n    axios.post(api_path)\n    .then(res => {\n      return res.data;\n    })\n    .then((data) => {\n      console.log(\"HERE 1: \", jsonFlickrFeed(data))\n      console.log('HERE 2: ', data)\n      let cards = [];\n      cards = data.map((card, index) => (\n        <Card\n          key={index}\n          author={card.author}\n          title={card.title}\n          description={card.description}\n          image={card.media.m}\n          tags={card.tags}\n        />\n      ))\n\n      dispatch(getImageSuccess(cards))\n    })\n    .catch(() => dispatch(getImageError(true)));\n\n\n    // let fetch = api => fetchJsonp(url, {\n    //   jsonpCallback: ' ',\n    //   jsonpCallbackFunction: 'jsonFlickrFeed'\n    // })\n\n    // fetch(url)\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw Error(response.statusText);\n    //     }\n    //     dispatch(getImageLoading(false));\n    //     return response;\n    //   })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     let cards = [];\n    //     cards = data.items.map((card, index) => (\n    //       <Card\n    //         key={index}\n    //         author={card.author}\n    //         title={card.title}\n    //         description={card.description}\n    //         image={card.media.m}\n    //         tags={card.tags}\n    //       />\n    //     ))\n\n    //     dispatch(getImageSuccess(cards))\n    //   })\n    //   .catch(() => dispatch(getImageError(true)));\n  };\n}\n\nexport function error(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_ERROR:\n      return action.error;\n    default:\n      return state;\n  }\n}\n\nexport function loading(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_LOADING:\n      return action.loading;\n    default:\n      return state;\n  }\n}\n\nexport function cards(state = [], action) {\n  switch (action.type) {\n    case GET_IMAGE_SUCCESS:\n      return action.cards;\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n    error,\n    loading,\n    cards\n});"]},"metadata":{},"sourceType":"module"}