{"ast":null,"code":"import React from'react';import{combineReducers}from'redux';import fetchJsonp from'fetch-jsonp';import Card from'../Card';import axios from'axios';var GET_IMAGE_LOADING='GET_IMAGE_LOADING';var GET_IMAGE_SUCCESS='GET_IMAGE_SUCCESS';var GET_IMAGE_ERROR='GET_IMAGE_ERROR';export function getImageLoading(bool){return{type:GET_IMAGE_LOADING,loading:bool};}export function getImageSuccess(cards){return{type:GET_IMAGE_SUCCESS,cards:cards};}export function getImageError(bool){return{type:GET_IMAGE_ERROR,error:bool};}export function getImage(url){var api_path=\"http://localhost:5000/api/getImage/\";return function(dispatch){dispatch(getImageLoading(true));axios.get(api_path).then(function(res){console.log(res);return res.data;}).catch(function(error){console.log(error);});// let fetch = api => fetchJsonp(url, {\n//   jsonpCallback: ' ',\n//   jsonpCallbackFunction: 'jsonFlickrFeed'\n// })\n// fetch(url)\n//   .then((response) => {\n//     if (!response.ok) {\n//       throw Error(response.statusText);\n//     }\n//     dispatch(getImageLoading(false));\n//     return response;\n//   })\n//   .then((response) => response.json())\n//   .then((data) => {\n//     let cards = [];\n//     cards = data.items.map((card, index) => (\n//       <Card\n//         key={index}\n//         author={card.author}\n//         title={card.title}\n//         description={card.description}\n//         image={card.media.m}\n//         tags={card.tags}\n//       />\n//     ))\n//     dispatch(getImageSuccess(cards))\n//   })\n//   .catch(() => dispatch(getImageError(true)));\n};}export function error(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_IMAGE_ERROR:return action.error;default:return state;}}export function loading(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_IMAGE_LOADING:return action.loading;default:return state;}}export function cards(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_IMAGE_SUCCESS:return action.cards;default:return state;}}export default combineReducers({error:error,loading:loading,cards:cards});","map":{"version":3,"sources":["/home/rangga/Downloads/aia/frontend/src/components/store/reducers.js"],"names":["React","combineReducers","fetchJsonp","Card","axios","GET_IMAGE_LOADING","GET_IMAGE_SUCCESS","GET_IMAGE_ERROR","getImageLoading","bool","type","loading","getImageSuccess","cards","getImageError","error","getImage","url","api_path","dispatch","get","then","res","console","log","data","catch","state","action"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,eAAT,KAAgC,OAAhC,CACA,MAAOC,CAAAA,UAAP,KAAuB,aAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,SAAjB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAGA,GAAMC,CAAAA,iBAAiB,CAAG,mBAA1B,CACA,GAAMC,CAAAA,iBAAiB,CAAG,mBAA1B,CACA,GAAMC,CAAAA,eAAe,CAAG,iBAAxB,CAEA,MAAO,SAASC,CAAAA,eAAT,CAAyBC,IAAzB,CAA+B,CACpC,MAAO,CACLC,IAAI,CAAEL,iBADD,CAELM,OAAO,CAAEF,IAFJ,CAAP,CAID,CAED,MAAO,SAASG,CAAAA,eAAT,CAAyBC,KAAzB,CAAgC,CACrC,MAAO,CACLH,IAAI,CAAEJ,iBADD,CAELO,KAAK,CAALA,KAFK,CAAP,CAID,CAED,MAAO,SAASC,CAAAA,aAAT,CAAuBL,IAAvB,CAA6B,CAClC,MAAO,CACLC,IAAI,CAAEH,eADD,CAELQ,KAAK,CAAEN,IAFF,CAAP,CAID,CAED,MAAO,SAASO,CAAAA,QAAT,CAAkBC,GAAlB,CAAuB,CAC5B,GAAMC,CAAAA,QAAQ,sCAAd,CACA,MAAO,UAACC,QAAD,CAAc,CACnBA,QAAQ,CAACX,eAAe,CAAC,IAAD,CAAhB,CAAR,CACAJ,KAAK,CAACgB,GAAN,CAAUF,QAAV,EACCG,IADD,CACM,SAAAC,GAAG,CAAI,CACXC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACA,MAAOA,CAAAA,GAAG,CAACG,IAAX,CACD,CAJD,EAKCC,KALD,CAKO,SAAUX,KAAV,CAAiB,CACtBQ,OAAO,CAACC,GAAR,CAAYT,KAAZ,EACD,CAPD,EAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD,CA1CD,CA2CD,CAED,MAAO,SAASA,CAAAA,KAAT,EAAsC,IAAvBY,CAAAA,KAAuB,2DAAf,KAAe,IAARC,CAAAA,MAAQ,2CAC3C,OAAQA,MAAM,CAAClB,IAAf,EACE,IAAKH,CAAAA,eAAL,CACE,MAAOqB,CAAAA,MAAM,CAACb,KAAd,CACF,QACE,MAAOY,CAAAA,KAAP,CAJJ,CAMD,CAED,MAAO,SAAShB,CAAAA,OAAT,EAAwC,IAAvBgB,CAAAA,KAAuB,2DAAf,KAAe,IAARC,CAAAA,MAAQ,2CAC7C,OAAQA,MAAM,CAAClB,IAAf,EACE,IAAKL,CAAAA,iBAAL,CACE,MAAOuB,CAAAA,MAAM,CAACjB,OAAd,CACF,QACE,MAAOgB,CAAAA,KAAP,CAJJ,CAMD,CAED,MAAO,SAASd,CAAAA,KAAT,EAAmC,IAApBc,CAAAA,KAAoB,2DAAZ,EAAY,IAARC,CAAAA,MAAQ,2CACxC,OAAQA,MAAM,CAAClB,IAAf,EACE,IAAKJ,CAAAA,iBAAL,CACE,MAAOsB,CAAAA,MAAM,CAACf,KAAd,CACF,QACE,MAAOc,CAAAA,KAAP,CAJJ,CAMD,CAED,cAAe1B,CAAAA,eAAe,CAAC,CAC3Bc,KAAK,CAALA,KAD2B,CAE3BJ,OAAO,CAAPA,OAF2B,CAG3BE,KAAK,CAALA,KAH2B,CAAD,CAA9B","sourcesContent":["import React from 'react';\nimport { combineReducers } from 'redux';\nimport fetchJsonp from 'fetch-jsonp';\nimport Card from '../Card';\nimport axios from 'axios'\n\n\nconst GET_IMAGE_LOADING = 'GET_IMAGE_LOADING';\nconst GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS';\nconst GET_IMAGE_ERROR = 'GET_IMAGE_ERROR';\n\nexport function getImageLoading(bool) {\n  return {\n    type: GET_IMAGE_LOADING,\n    loading: bool\n  };\n}\n\nexport function getImageSuccess(cards) {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    cards\n  };\n}\n\nexport function getImageError(bool) {\n  return {\n    type: GET_IMAGE_ERROR,\n    error: bool\n  };\n}\n\nexport function getImage(url) {\n  const api_path = `http://localhost:5000/api/getImage/`\n  return (dispatch) => {\n    dispatch(getImageLoading(true));\n    axios.get(api_path)\n    .then(res => {\n      console.log(res)\n      return res.data;\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n\n\n    // let fetch = api => fetchJsonp(url, {\n    //   jsonpCallback: ' ',\n    //   jsonpCallbackFunction: 'jsonFlickrFeed'\n    // })\n\n    // fetch(url)\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw Error(response.statusText);\n    //     }\n    //     dispatch(getImageLoading(false));\n    //     return response;\n    //   })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     let cards = [];\n    //     cards = data.items.map((card, index) => (\n    //       <Card\n    //         key={index}\n    //         author={card.author}\n    //         title={card.title}\n    //         description={card.description}\n    //         image={card.media.m}\n    //         tags={card.tags}\n    //       />\n    //     ))\n\n    //     dispatch(getImageSuccess(cards))\n    //   })\n    //   .catch(() => dispatch(getImageError(true)));\n  };\n}\n\nexport function error(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_ERROR:\n      return action.error;\n    default:\n      return state;\n  }\n}\n\nexport function loading(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_LOADING:\n      return action.loading;\n    default:\n      return state;\n  }\n}\n\nexport function cards(state = [], action) {\n  switch (action.type) {\n    case GET_IMAGE_SUCCESS:\n      return action.cards;\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n    error,\n    loading,\n    cards\n});"]},"metadata":{},"sourceType":"module"}