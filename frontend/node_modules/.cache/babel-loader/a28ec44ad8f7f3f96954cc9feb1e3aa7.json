{"ast":null,"code":"var _jsxFileName = \"/home/rangga/Downloads/aia/frontend/src/components/redux/reducers.js\";\nimport React from 'react';\nimport { combineReducers } from 'redux';\nimport fetchJsonp from 'fetch-jsonp';\nimport Card from '../Card';\nconst GET_IMAGE_LOADING = 'GET_IMAGE_LOADING';\nconst GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS';\nconst GET_IMAGE_ERROR = 'GET_IMAGE_ERROR';\nexport function getImageLoading(bool) {\n  return {\n    type: GET_IMAGE_LOADING,\n    loading: bool\n  };\n}\nexport function getImageSuccess(cards) {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    cards\n  };\n}\nexport function getImageError(bool) {\n  return {\n    type: GET_IMAGE_ERROR,\n    error: bool\n  };\n}\nexport function getImage(url) {\n  return dispatch => {\n    dispatch(getImageLoading(true));\n\n    let fetch = api => fetchJsonp(url, {\n      jsonpCallback: ' ',\n      jsonpCallbackFunction: 'jsonFlickrFeed'\n    });\n\n    fetch(url).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      dispatch(getImageLoading(false));\n      return response;\n    }).then(response => response.json()).then(data => {\n      let cards = [];\n      cards = data.items.map((card, index) => /*#__PURE__*/React.createElement(Card, {\n        key: index,\n        author: card.author,\n        author_page: 'https://www.flickr.com/people/' + card.author_id,\n        title: card.title,\n        description: card.description,\n        image: card.media.m,\n        imageLink: card.link,\n        tags: card.tags,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }));\n      dispatch(getImageSuccess(cards));\n    }).catch(() => dispatch(getImageError(true)));\n  };\n}\nexport function error(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_ERROR:\n      return action.error;\n\n    default:\n      return state;\n  }\n}\nexport function loading(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_LOADING:\n      return action.loading;\n\n    default:\n      return state;\n  }\n}\nexport function cards(state = [], action) {\n  switch (action.type) {\n    case GET_IMAGE_SUCCESS:\n      return action.cards;\n\n    default:\n      return state;\n  }\n}\nexport default combineReducers({\n  error,\n  loading,\n  cards\n});","map":{"version":3,"sources":["/home/rangga/Downloads/aia/frontend/src/components/redux/reducers.js"],"names":["React","combineReducers","fetchJsonp","Card","GET_IMAGE_LOADING","GET_IMAGE_SUCCESS","GET_IMAGE_ERROR","getImageLoading","bool","type","loading","getImageSuccess","cards","getImageError","error","getImage","url","dispatch","fetch","api","jsonpCallback","jsonpCallbackFunction","then","response","ok","Error","statusText","json","data","items","map","card","index","author","author_id","title","description","media","m","link","tags","catch","state","action"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { combineReducers } from 'redux';\nimport fetchJsonp from 'fetch-jsonp';\nimport Card from '../Card';\n\nconst GET_IMAGE_LOADING = 'GET_IMAGE_LOADING';\nconst GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS';\nconst GET_IMAGE_ERROR = 'GET_IMAGE_ERROR';\n\nexport function getImageLoading(bool) {\n  return {\n    type: GET_IMAGE_LOADING,\n    loading: bool\n  };\n}\n\nexport function getImageSuccess(cards) {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    cards\n  };\n}\n\nexport function getImageError(bool) {\n  return {\n    type: GET_IMAGE_ERROR,\n    error: bool\n  };\n}\n\nexport function getImage(url) {\n  return (dispatch) => {\n    dispatch(getImageLoading(true));\n\n    let fetch = api => fetchJsonp(url, {\n      jsonpCallback: ' ',\n      jsonpCallbackFunction: 'jsonFlickrFeed'\n    })\n\n    fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        dispatch(getImageLoading(false));\n        return response;\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        let cards = [];\n        cards = data.items.map((card, index) => (\n          <Card\n            key={index}\n            author={card.author}\n            author_page={'https://www.flickr.com/people/' + card.author_id}\n            title={card.title}\n            description={card.description}\n            image={card.media.m}\n            imageLink={card.link}\n            tags={card.tags}\n          />\n        ))\n\n        dispatch(getImageSuccess(cards))\n      })\n      .catch(() => dispatch(getImageError(true)));\n  };\n}\n\nexport function error(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_ERROR:\n      return action.error;\n    default:\n      return state;\n  }\n}\n\nexport function loading(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_LOADING:\n      return action.loading;\n    default:\n      return state;\n  }\n}\n\nexport function cards(state = [], action) {\n  switch (action.type) {\n    case GET_IMAGE_SUCCESS:\n      return action.cards;\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n    error,\n    loading,\n    cards\n});"]},"metadata":{},"sourceType":"module"}