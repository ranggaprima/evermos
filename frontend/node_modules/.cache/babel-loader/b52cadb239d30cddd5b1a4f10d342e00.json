{"ast":null,"code":"import React from 'react';\nimport { combineReducers } from 'redux';\nimport fetchJsonp from 'fetch-jsonp';\nimport Card from '../Card';\nconst GET_IMAGE_LOADING = 'GET_IMAGE_LOADING';\nconst GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS';\nconst GET_IMAGE_ERROR = 'GET_IMAGE_ERROR';\nexport function getImageLoading(bool) {\n  return {\n    type: GET_IMAGE_LOADING,\n    loading: bool\n  };\n}\nexport function getImageSuccess(cards) {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    cards\n  };\n}\nexport function getImageError(bool) {\n  return {\n    type: GET_IMAGE_ERROR,\n    error: bool\n  };\n}\nexport function getImage(url) {\n  const api_path = `http://localhost:5000/api/getImage`;\n  return dispatch => {\n    dispatch(getImageLoading(true));\n    axios.get(api_path).then(res => {\n      return res.data;\n    }).catch(function (error) {\n      console.log(error);\n    }); // let fetch = api => fetchJsonp(url, {\n    //   jsonpCallback: ' ',\n    //   jsonpCallbackFunction: 'jsonFlickrFeed'\n    // })\n    // fetch(url)\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw Error(response.statusText);\n    //     }\n    //     dispatch(getImageLoading(false));\n    //     return response;\n    //   })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     let cards = [];\n    //     cards = data.items.map((card, index) => (\n    //       <Card\n    //         key={index}\n    //         author={card.author}\n    //         title={card.title}\n    //         description={card.description}\n    //         image={card.media.m}\n    //         tags={card.tags}\n    //       />\n    //     ))\n    //     dispatch(getImageSuccess(cards))\n    //   })\n    //   .catch(() => dispatch(getImageError(true)));\n  };\n}\nexport function error(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_ERROR:\n      return action.error;\n\n    default:\n      return state;\n  }\n}\nexport function loading(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_LOADING:\n      return action.loading;\n\n    default:\n      return state;\n  }\n}\nexport function cards(state = [], action) {\n  switch (action.type) {\n    case GET_IMAGE_SUCCESS:\n      return action.cards;\n\n    default:\n      return state;\n  }\n}\nexport default combineReducers({\n  error,\n  loading,\n  cards\n});","map":{"version":3,"sources":["/home/rangga/Downloads/aia/frontend/src/components/store/reducers.js"],"names":["React","combineReducers","fetchJsonp","Card","GET_IMAGE_LOADING","GET_IMAGE_SUCCESS","GET_IMAGE_ERROR","getImageLoading","bool","type","loading","getImageSuccess","cards","getImageError","error","getImage","url","api_path","dispatch","axios","get","then","res","data","catch","console","log","state","action"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAEA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAO;AACLC,IAAAA,IAAI,EAAEL,iBADD;AAELM,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID;AAED,OAAO,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,SAAO;AACLH,IAAAA,IAAI,EAAEJ,iBADD;AAELO,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,aAAT,CAAuBL,IAAvB,EAA6B;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEH,eADD;AAELQ,IAAAA,KAAK,EAAEN;AAFF,GAAP;AAID;AAED,OAAO,SAASO,QAAT,CAAkBC,GAAlB,EAAuB;AAC5B,QAAMC,QAAQ,GAAI,oCAAlB;AACA,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACX,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAY,IAAAA,KAAK,CAACC,GAAN,CAAUH,QAAV,EACCI,IADD,CACMC,GAAG,IAAI;AACX,aAAOA,GAAG,CAACC,IAAX;AACD,KAHD,EAICC,KAJD,CAIO,UAAUV,KAAV,EAAiB;AACtBW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACD,KAND,EAFmB,CAWnB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD,GAzCD;AA0CD;AAED,OAAO,SAASA,KAAT,CAAea,KAAK,GAAG,KAAvB,EAA8BC,MAA9B,EAAsC;AAC3C,UAAQA,MAAM,CAACnB,IAAf;AACE,SAAKH,eAAL;AACE,aAAOsB,MAAM,CAACd,KAAd;;AACF;AACE,aAAOa,KAAP;AAJJ;AAMD;AAED,OAAO,SAASjB,OAAT,CAAiBiB,KAAK,GAAG,KAAzB,EAAgCC,MAAhC,EAAwC;AAC7C,UAAQA,MAAM,CAACnB,IAAf;AACE,SAAKL,iBAAL;AACE,aAAOwB,MAAM,CAAClB,OAAd;;AACF;AACE,aAAOiB,KAAP;AAJJ;AAMD;AAED,OAAO,SAASf,KAAT,CAAee,KAAK,GAAG,EAAvB,EAA2BC,MAA3B,EAAmC;AACxC,UAAQA,MAAM,CAACnB,IAAf;AACE,SAAKJ,iBAAL;AACE,aAAOuB,MAAM,CAAChB,KAAd;;AACF;AACE,aAAOe,KAAP;AAJJ;AAMD;AAED,eAAe1B,eAAe,CAAC;AAC3Ba,EAAAA,KAD2B;AAE3BJ,EAAAA,OAF2B;AAG3BE,EAAAA;AAH2B,CAAD,CAA9B","sourcesContent":["import React from 'react';\nimport { combineReducers } from 'redux';\nimport fetchJsonp from 'fetch-jsonp';\nimport Card from '../Card';\n\nconst GET_IMAGE_LOADING = 'GET_IMAGE_LOADING';\nconst GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS';\nconst GET_IMAGE_ERROR = 'GET_IMAGE_ERROR';\n\nexport function getImageLoading(bool) {\n  return {\n    type: GET_IMAGE_LOADING,\n    loading: bool\n  };\n}\n\nexport function getImageSuccess(cards) {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    cards\n  };\n}\n\nexport function getImageError(bool) {\n  return {\n    type: GET_IMAGE_ERROR,\n    error: bool\n  };\n}\n\nexport function getImage(url) {\n  const api_path = `http://localhost:5000/api/getImage`\n  return (dispatch) => {\n    dispatch(getImageLoading(true));\n    axios.get(api_path)\n    .then(res => {\n      return res.data;\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n\n\n    // let fetch = api => fetchJsonp(url, {\n    //   jsonpCallback: ' ',\n    //   jsonpCallbackFunction: 'jsonFlickrFeed'\n    // })\n\n    // fetch(url)\n    //   .then((response) => {\n    //     if (!response.ok) {\n    //       throw Error(response.statusText);\n    //     }\n    //     dispatch(getImageLoading(false));\n    //     return response;\n    //   })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     let cards = [];\n    //     cards = data.items.map((card, index) => (\n    //       <Card\n    //         key={index}\n    //         author={card.author}\n    //         title={card.title}\n    //         description={card.description}\n    //         image={card.media.m}\n    //         tags={card.tags}\n    //       />\n    //     ))\n\n    //     dispatch(getImageSuccess(cards))\n    //   })\n    //   .catch(() => dispatch(getImageError(true)));\n  };\n}\n\nexport function error(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_ERROR:\n      return action.error;\n    default:\n      return state;\n  }\n}\n\nexport function loading(state = false, action) {\n  switch (action.type) {\n    case GET_IMAGE_LOADING:\n      return action.loading;\n    default:\n      return state;\n  }\n}\n\nexport function cards(state = [], action) {\n  switch (action.type) {\n    case GET_IMAGE_SUCCESS:\n      return action.cards;\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n    error,\n    loading,\n    cards\n});"]},"metadata":{},"sourceType":"module"}